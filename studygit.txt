初始化一个git仓库，使用git init命令。

添加文件到git仓库，分两步：
    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    第二部，使用命令git commit，完成。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

HEAD指向版本就是当前版本，因此，git允许我们在版本的历史之间穿梭，使用命令
git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定回到未来的哪个版本。

使用git log命令显示从最近到最远的提交日志，如果嫌输出信息太多，可以试试加上
--pretty=oneline参数。

把文件往git版本库里添加的时候，是分两步执行的：
    第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区。
    第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

每次修改，如果不add到暂存区，那就不会加入到commit中。

场景1：改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

删除文件：
    1.要从版本库中删除文件，用命令git rm删掉，并且git commit。
    2.如果删错了，用命令git checkout -- file把误删的文件恢复到最新版本。

创建SSH KEY命令：$ssh-keygen -t rsa -C "email@email.com"

本地仓库与远程仓库连接：$git remote add origin git@github.com:username/repository.git
username表示github用户名，repository表示github仓库。

关联后，使用命令git push -u origin master第一次推送master分支的所有内容。每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。

要克隆一个远程仓库，使用git clone 仓库地址进行克隆。

git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

git鼓励大量使用分支：
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>

当git无法自动合并分支时，就必须首先解决冲突。然后再提交。

用git log --graph命令可以看到分支合并图。

合并分支时，加上--no--ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，再git stash pop，回到工作现场。

git stash list 可以查看stash后的工作现场。

恢复工作现场的方法：
    一是用git stash apply恢复，但是恢复后，stash内容并不删除，需要用git stash drop来删除；
    二是用git stash pop，恢复的同时把stash内容也删了。

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

查看远程库信息，使用git remote -v。

本地新建的分支如果不推送到远程，对其他人就是不可见的。

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程新提交。

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致。

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name。

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..." 可以指定标签信息；
git tag -s <tagname> -m "blablabla..." 可以用PGP签名标签；
命令git tag 可以查看所有标签。
git show <tagname>查看标签信息。

命令git push origin <tagname>可以推送一个本地标签。

命令git push origin --tags可以推送全部未推送过的本地标签。

命令git tag -d <tagname>可以删除一个本地标签。

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

忽略某些文件时，需要编写.gitignore。
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理。

